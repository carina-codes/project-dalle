import React, { useState, useEffect } from 'react';
import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      data.map((post) => <Card key={post._id} {...post} />)
    );
  }

  return (
    <h2>
      {title}
    </h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  // Form fields
  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch('https://dall-e-ehuv.onrender.com/api/v1/post', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          const result = await response.json();
          setAllPosts(result.data.reverse());
        }
      } catch (err) {
        alert(err);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  return (
    <section>
      <div className="container">
        <div className="row">
          <div className="col-md-12">
            <div className="header">
              <h1>
                The Community Showcase
              </h1>
              <p>
                Browse through a collection of imaginative and visually stunning images generated by DALL-E AI.
              </p>
            </div>

            <div className="form">
              <FormField 
                labelname="Search posts"
                type="text" 
                name="text" 
                placeholder="Search posts"
                value={searchText} 
                handleChange={handleSearchChange}
              />
            </div>

            <div className="search-results">
              {loading ? (
                <div className="loader-container jalign">
                  <Loader />
                </div>
              ) : (
                <>
                  {searchText && (
                    <h2 className="show-results-text">
                      Showing results for <span>{searchText}</span>
                    </h2>
                  )}
                  <div className="grid">
                    {searchText ? (
                      <RenderCards 
                        data={searchedResults}
                        title="No search results found"
                      />
                    ) : (
                      <RenderCards 
                        data={allPosts}
                        title="No posts yet"
                      />
                    )}
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default Home;